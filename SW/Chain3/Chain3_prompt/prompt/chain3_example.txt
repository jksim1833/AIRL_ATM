[user]
I will give you some examples of the input and the output you will generate. 
Example 1:
"""
- Input:
{"objects": ["seat_1"],
"object_states": ["seat_1": {"type": "chair", "position": (1,1), "direction": "forward"}],
"instruction": "seat_1(storage, (1,1), forward)"}
- Output:
```
{"instruction": "seat_1(storage, (1,1), forward)",
"task_cohesion": {
    "task_sequence": [
       "storage(seat_1)"
    ],
    "step_instructions": [
       "convert it into storage type"
    ]},
"environment_before": {
    "objects": ["seat_1"],
    "object_states": ["seat_1": {"type": "chair", "position": (1,1), "direction": "forward"}]},
"environment_after": {
    "objects": ["seat_1"],
    "object_states": ["seat_1": {"type": "storage", "position": (1,1), "direction": "forward"}]}}
```
"""
Example 2:
"""
- Input:
{"objects": ["seat_1"],
"object_states": ["seat_1": {"type": "chair", "position": (1,1), "direction": "forward"}],
"instruction": "seat_1(chair, (1,1), backward)"}
- Output:
```
{"instruction": "seat_1(chair, (1,1), backward)",
"task_cohesion": {
    "task_sequence": [
       "storage(seat_1)",
       "rotate(seat_1, 180)"
       "chair(seat_1)",
    ],
    "step_instructions": [
       "convert it into storage type for rotate(seat_id, degree) action",
       "rotate the seat 180 degree to face backward",
       "convert it into chiar type"
    ]},
"environment_before": {
    "objects": ["seat_1"],
    "object_states": ["seat_1": {"type": "chair", "position": (1,1), "direction": "forward"}]},
"environment_after": {
    "objects": ["seat_1"],
    "object_states": ["seat_1": {"type": "chair", "position": (1,1), "direction": "backward"}]}}
```
"""
Example 3:
"""
- Input:
{"objects": ["seat_1"],
"object_states": ["seat_1": {"type": "chair", "position": (1,1), "direction": "forward"}],
"instruction": "seat_1(storage, (0,0), forward)"}
- Output:
```
{"instruction": "seat_1(storage, 0, 0, forward)",
"task_cohesion": {
    "task_sequence": [
       "storage(seat_1)",
       "move(seat_1, 0, 0)",
       "chair(seat_1)"
    ],
    "step_instructions": [
      "convert it into storage type for move(seat_id, x, y) action",
      "move the seat to position (0,0) coordinate",
      "convert it into chiar type"
    ]},
"environment_before": {
    "objects": ["seat_1"],
    "object_states": ["seat_1": {"type": "chair", "position": (1,1), "direction": "forward"}]},
"environment_after": {
    "objects": ["seat_1"],
    "object_states": ["seat_1": {"type": "chair", "position": (0,0), "direction": "forward"}]}}
```
"""
Example 4:
"""
- Input:
{"objects": ["seat_1"],
"object_states": ["seat_1": {"type": "chair", "position": (1,1), "direction": "forward"}],
"instruction": "seat_1(storage, (0,1), right)"}
- Output:
```
{"instruction": "seat_1(storage, (0,1), right)",
"task_cohesion": {
    "task_sequence": [
      "storage(seat_1)",
      "rotate(seat_1, 90)",
      "move(seat_1, 0, 1)"
    ],
    "step_instructions": [
      "fold the seat to convert it into storage type",
      "rotate the seat to face right",
      "move the seat to position (0,1) coordinate"
    ]},
"environment_before": {
    "objects": ["seat_1"],
    "object_states": ["seat_1": {"type": "chair", "position": (1,1), "direction": "forward"}]},
"environment_after": {
    "objects": ["seat_1"],
    "object_states": ["seat_1": {"type": "storage", "position": (0,1), "direction": "right"}]}}
```
"""
From these examples, learn that some seat control actions have dependencies with the actions before and after them.
-------------------------------------------------------
The texts above are part of the overall instruction. Do not start working yet:
[assistant]
Understood. I will wait for further instructions before starting to work.